@page "/contact"
@using System.ComponentModel.DataAnnotations

<PageTitle>Contact</PageTitle>

<h1>Contact</h1>

<EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit" FormName="Contact">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" Value="@Model.Name"
                   ValueChanged="@(value => OnFieldChanged(nameof(Model.Name), value))"
                   ValueExpression="@(() => Model.Name)" />
        <ValidationMessage For="@(() => Model.Name)" />
    </div>

    <div class="mb-3">
        <label for="email" class="form-label">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="Model.Email" />
        <ValidationMessage For="@(() => Model.Email)" />
    </div>

    <div class="mb-3">
        <label for="subject" class="form-label">Subject</label>
        <InputText id="subject" class="form-control" @bind-Value="Model.Subject" />
        <ValidationMessage For="@(() => Model.Subject)" />
    </div>

    <div class="mb-3">
        <label for="message" class="form-label">Message</label>
        <InputTextArea id="message" class="form-control" Rows="5" @bind-Value="Model.Message" />
        <ValidationMessage For="@(() => Model.Message)" />
    </div>

    <button type="submit" class="btn btn-primary">Send Message</button>
</EditForm>

@if (isSubmitted)
{
    <div class="alert alert-success mt-3">
        Thank you! Your message has been sent.
    </div>
}

@code {
    private ContactModel Model = new ContactModel();
    private bool isSubmitted = false;

    private void HandleValidSubmit()
    {
        isSubmitted = true;
    }

    public class ContactModel
    {
        [Required(ErrorMessage = "Name is required.")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Subject is required.")]
        public string Subject { get; set; } = string.Empty;

        [Required(ErrorMessage = "Message is required.")]
        [StringLength(1000, ErrorMessage = "Message is too long.")]
        public string Message { get; set; } = string.Empty;
    }

    private void OnFieldChanged(string fieldName, object? newValue)
    {
        if (fieldName == nameof(Model.Name))
        {
            Model.Name = newValue?.ToString() ?? string.Empty;
        }   
        if (fieldName == nameof(Model.Email))
        {
            Model.Email = newValue?.ToString() ?? string.Empty;
        }
        if (fieldName == nameof(Model.Subject))
        {
            Model.Subject = newValue?.ToString() ?? string.Empty;
        }
        if (fieldName == nameof(Model.Message))
        {
            Model.Message = newValue?.ToString() ?? string.Empty;
        }
    }
}

